syntax = "proto3";

package api;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/rprtr258/pm/api";

service Daemon {
  // process management
  rpc Start (ProcID)        returns (google.protobuf.Empty);
  rpc Signal(SignalRequest) returns (google.protobuf.Empty);
  rpc Stop  (ProcID)        returns (google.protobuf.Empty);

  // CRUD operations
  rpc Create(CreateRequest)         returns (ProcID);
  rpc List  (google.protobuf.Empty) returns (ProcessesList);
  rpc Delete(ProcID)                returns (google.protobuf.Empty);

  rpc HealthCheck(google.protobuf.Empty) returns (Status);

  rpc Subscribe(ProcID) returns (stream Process); // subscribe to changes
}

message CreateRequest {
  string              command     = 1;
  repeated string     args        = 2;
  optional string     name        = 3;
  string              cwd         = 4;
  repeated string     tags        = 5;
  map<string, string> env         = 6;
  optional string     watch       = 7;
  optional string     stdout_file = 8;
  optional string     stderr_file = 9;
}

message ProcessesList {
  repeated Process processes = 1;
}

message Process {
  ProcID              id          = 1;
  ProcessStatus       status      = 2;
  string              name        = 3;
  string              cwd         = 4;
  repeated string     tags        = 5;
  string              command     = 6;
  repeated string     args        = 7;
  optional string     watch       = 8;
  string              stdout_file = 9;
  string              stderr_file = 10;
  map<string, string> env         = 11;
}

message ProcessStatus {
  oneof status {
    google.protobuf.Empty invalid = 1;
    google.protobuf.Empty created = 2;
    RunningProcessStatus  running = 3;
    StoppedProcessStatus  stopped = 4;
  };
}

message RunningProcessStatus {
  google.protobuf.Timestamp start_time = 1;
  uint64                    cpu        = 2;
  uint64                    memory     = 3;
}

message StoppedProcessStatus {
}

message ProcID {
  string id = 1;
}

enum Signal {
  SIGNAL_UNSPECIFIED = 0;
  SIGNAL_SIGTERM     = 1;
  SIGNAL_SIGKILL     = 2;
}

message SignalRequest {
  ProcID id     = 1;
  Signal signal = 2;
}

message Watchplace {
  string root    = 1;
  string pattern = 2;
}

message Status {
  repeated string         args            =  1;
  map<string, string>     envs            =  2;
  string                  executable      =  3;
  string                  cwd             =  4;
  repeated int64          groups          =  5;
  int64                   page_size       =  6;
  string                  hostname        =  7;
  string                  user_cache_dir  =  8;
  string                  user_config_dir =  9;
  string                  user_home_dir   = 10;
  int64                   pid             = 11;
  int64                   ppid            = 12;
  int64                   uid             = 13;
  int64                   euid            = 14;
  int64                   gid             = 15;
  int64                   egid            = 16;
  map<string, Watchplace> watches         = 17;
}
